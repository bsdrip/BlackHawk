from django.shortcuts import render, redirect
from django.http import FileResponse

from .forms import ScanConfigForm
from .tasks import run_scan
from .models import Scan
import json
import io
import datetime
import markdown
from weasyprint import HTML


def generate_report(request, scan_id):
    scan = Scan.objects.get(id=scan_id)
    scan.result_json = json.loads(scan.result_json)

    logo_url = '/static/logo.png'
    software_title = 'BlackHawk Vulnerability Scanner Report'
    scan_title = 'Scan Title: ' + scan.scan_title
    date = 'Generated on ' + datetime.datetime.now().strftime("%Y-%m-%d")

    css = """
<style>
    @page {
        size: A4;
        margin: 1cm;
    }
    @font-face {
        font-family: 'Garamond';
        src: url('/static/fonts/garamond/GARA.TTF') format('truetype');
    }
    @font-face {
        font-family: 'Garamond';
        src: url('/static/fonts/garamond/GARABD.TTF') format('truetype');
        font-weight: bold;
    }
    @font-face {
        font-family: 'Garamond';
        src: url('/static/fonts/garamond/GARAIT.TTF') format('truetype');
        font-style: italic;
    }
    body {
        font-family: 'Garamond';
        font-size: 16px;
    }
    h1 {
        font-size: 30px;
    }
    h2 {
        font-size: 24px;
    }
    h3 {
        font-size: 20px;
    }
    h4 {
        font-size: 18px;
    }
    h5 {
        font-size: 16px;
    }
</style>
"""

    scan_info = f"""
## Scan Information
---
**Scan Title:** {scan.scan_title}  
**Scan Type:** {'Cautious' if scan.scan_type == 'T1' else 'Normal' if scan.scan_type == 'T2' else 'Aggressive'}  
**Targets:** {scan.targets}  
**Ports:** {scan.ports}  
**Start Time:** {scan.start_date.strftime("%Y-%m-%d %H:%M:%S")}  
**End Time:** {scan.finish_date.strftime("%Y-%m-%d %H:%M:%S")}  
**Scan Duration:** {scan.run_time}  
**Number of Findings:**  
<pre>
    Critical: {scan.result_json['vuln_numbers']['critical_issues']}  
    High: {scan.result_json['vuln_numbers']['high_issues']}  
    Medium: {scan.result_json['vuln_numbers']['medium_issues']}  
    Low: {scan.result_json['vuln_numbers']['low_issues']}  
    Info: {scan.result_json['vuln_numbers']['info_issues']}  
</pre>
"""

    details = f"""
<div style="page-break-after: always;"></div>
## Details
---
"""

    for ip in scan.result_json['vulnerabilities']:
        details += f"""
# {ip['ip']}
"""
        for port in ip['ports']:
            details += f"""
## ({port['port']}) {port['service']['product']} {port['service']['version']}
---
"""
            for cve in port['cves']:
                details += f"""
##### [{cve['cve']}](https://nvd.nist.gov/vuln/detail/{cve['cve']})
---
**CVSS Score:** {cve['data']['cvss']['baseScore']}  
**CVSS Vector:** {cve['data']['cvss']['vectorString']}  
**Summary:** {cve['data']['description']}  
"""
            details += "<div style='page-break-after: always;'></div>"
        details += "<div style='page-break-after: always;'></div>"

    details = details.replace(
        "<div style='page-break-after: always;'></div><div style='page-break-after: always;'></div>",
        "<div style='page-break-after: always;'></div>",
    )
    details = details[:-len("<div style='page-break-after: always;'></div>")]


    md_content = f"""
{css}
# {software_title}
<div style="text-align: center;">
    <img src="{logo_url}" alt="Logo" width="200" style="width:50;height:auto;"/>
</div>
{scan_info}
{details}
<br>
_{date}_
"""

    md_content = md_content.strip()
    html_content = markdown.markdown(md_content)

    html = HTML(string=html_content, base_url=request.build_absolute_uri())
    pdf = html.write_pdf()

    response = FileResponse(io.BytesIO(pdf), content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{scan.scan_title} Vulnerability Report.pdf"'

    return response


def generate_json(request, scan_id):
    scan = Scan.objects.get(id=scan_id)
    scan.result_json = json.loads(scan.result_json)
    return FileResponse(
        json.dumps(scan.result_json, indent=4),
        as_attachment=True,
        content_type='application/json',
        filename='report.json',
    )


def config(request):
    if request.method == 'POST':
        scan_config_form = ScanConfigForm(request.POST)
        if scan_config_form.is_valid():
            scan_config_form.save()

            run_scan.delay(
                scan_config_form.cleaned_data,
                scan_config_form.instance.id,
            )
            return redirect('dashboard')
        else:
            return render(
                request,
                'VulnerabilityScanner/config.html',
                {
                    'form': scan_config_form,
                },
            )
    scan_config_form = ScanConfigForm()
    return render(
        request,
        'VulnerabilityScanner/config.html',
        {
            'form': scan_config_form,
        },
    )


def update_title(request, scan_id):
    if request.method == "GET":
        return render(
            request,
            'VulnerabilityScanner/update_title.html',
            {
                'form': ScanConfigForm(instance=Scan.objects.get(id=scan_id)),
            },
        )
    else:
        scan = Scan.objects.get(id=scan_id)
        scan.scan_title = request.POST['scan_title']
        scan.save()
        return redirect('dashboard')


def delete_scan(request, scan_id):
    Scan.objects.get(id=scan_id).delete()
    return redirect('dashboard')


def rerun_scan(request, scan_id):
    scan = Scan.objects.get(id=scan_id)
    data = {
        'scan_title': scan.scan_title,
        'scan_type': scan.scan_type,
        'ports': scan.ports,
        'udp': scan.udp,
        'targets': scan.targets,
    }
    scan_config_form = ScanConfigForm(data)
    scan_config_form.save()

    run_scan.delay(
        scan_config_form.cleaned_data,
        scan_config_form.instance.id,
    )
    return redirect('dashboard')


def dashboard(request):
    running_scans = Scan.objects.filter(is_running=True)
    completed_scans = Scan.objects.filter(is_running=False)

    for scan in completed_scans:
        scan.result_json = json.loads(scan.result_json)

    return render(
        request,
        'VulnerabilityScanner/dashboard.html',
        {
            'running_scans': running_scans,
            'completed_scans': completed_scans,
        },
    )


def recent_scans(request):
    completed_scans = Scan.objects.filter(is_running=False)

    for scan in completed_scans:
        scan.result_json = json.loads(scan.result_json)

    return render(
        request,
        'VulnerabilityScanner/recent_scans.html',
        {
            'completed_scans': completed_scans,
        },
    )


def scan_details(request, scan_id):
    scan = Scan.objects.get(id=scan_id)
    scan.result_json = json.loads(scan.result_json)

    return render(
        request,
        'VulnerabilityScanner/scan_details.html',
        {
            'scan': scan,
        },
    )
