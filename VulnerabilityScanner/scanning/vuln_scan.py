from nmap3 import Nmap
import json
import logging
import os


class VulnScan:
    def __init__(
        self,
        scan_title,
        scan_type,
        targets,
        ports,
        udp=False,
        datetime='',
        log_level=logging.INFO,
    ):
        logging.basicConfig(level=log_level)
        self._scan_title = scan_title
        self._scan_type = scan_type
        self._targets = targets
        self._ports = ports
        self._datetime = datetime
        self._script = "--script=vulners"
        self._udp = '-sU' if udp else ''
        logging.debug(
            "Initializing vulnerability scan: nmap -sV -%s -p %s %s %s",
            self._scan_type,
            self._ports,
            self._script,
            self._targets,
        )

    def run(self):
        self.nmap = Nmap()
        logging.info("Running vulnerability scan on %s", self._targets)
        self._results = self.nmap.nmap_version_detection(
            self._targets,
            args=f'-{self._scan_type} -p {self._ports} {self._script} {self._udp}',
        )
        logging.info("Vulnerability scan complete")
        logging.info("-" * 80)
        logging.info("Results: %s\n", self._results)

    def get_vulns(self):
        logging.info("Generating vulnerability report json")
        cves = []
        for ip in self._results:
            if ip == 'runtime':
                break
            cves.append({"ip": ip, "ports": []})
            for port in self._results[ip]["ports"]:
                if "scripts" in port.keys():
                    for script in port['scripts']:
                        if script['name'] == 'vulners':
                            cves[-1]['ports'].append({
                                "port": port['portid'],
                                "cves": [],
                                "service": port['service'],
                            })
                            for cpe in script['data'].keys():
                                for cve in script['data'][cpe]['children']:
                                    if cve['type'] == 'cve':
                                        cves[-1]['ports'][-1]['cves'].append({
                                            "cve": cve['id'],
                                            "data": self._get_vuln_details(cve['id'], logging),
                                        })
        cves = [cve for cve in cves if cve['ports']]
        logging.info("Vulnerability report json generated")
        logging.info("-" * 80)
        logging.info("Vulnerabilities: %s\n", cves)
        return cves

    @staticmethod
    def _get_vuln_details(cve, logger):
        logger.info("Getting details for %s", cve)
        current_dir = os.path.dirname(os.path.realpath(__file__))
        filename = f'{current_dir}/resources/nvd-json-data-feeds/CVE-{cve[4:8]}/CVE-{cve[4:-2]}xx/{cve}.json'
        logger.debug("Reading %s", filename)
        with open(filename, "r") as f:
            data = json.load(f)
        description = data['descriptions'][0]['value']
        if data['metrics'].get('cvssMetricV31', None):
            cvss_data = data['metrics']['cvssMetricV31'][0]['cvssData']
        elif data['metrics'].get('cvssMetricV2', None):
            cvss_data = data['metrics']['cvssMetricV2'][0]['cvssData']
        else:
            cvss_data = {}
        return {
            "description": description,
            "cvss": cvss_data,
        }
